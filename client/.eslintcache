[{"/Users/romesh/lighthouse/LHL-final-project/client/src/index.js":"1","/Users/romesh/lighthouse/LHL-final-project/client/src/reportWebVitals.js":"2","/Users/romesh/lighthouse/LHL-final-project/client/src/App.js":"3","/Users/romesh/lighthouse/LHL-final-project/client/src/components/Player.js":"4","/Users/romesh/lighthouse/LHL-final-project/client/src/components/Waveform.js":"5","/Users/romesh/lighthouse/LHL-final-project/client/src/EventEmitter.js":"6"},{"size":500,"mtime":1610731422925,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1610731422926,"results":"9","hashOfConfig":"8"},{"size":1240,"mtime":1610847034777,"results":"10","hashOfConfig":"8"},{"size":816,"mtime":1610844069864,"results":"11","hashOfConfig":"8"},{"size":3862,"mtime":1610846335307,"results":"12","hashOfConfig":"8"},{"size":597,"mtime":1610846051312,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1wqprfu",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/romesh/lighthouse/LHL-final-project/client/src/index.js",[],["28","29"],"/Users/romesh/lighthouse/LHL-final-project/client/src/reportWebVitals.js",[],"/Users/romesh/lighthouse/LHL-final-project/client/src/App.js",[],"/Users/romesh/lighthouse/LHL-final-project/client/src/components/Player.js",[],"/Users/romesh/lighthouse/LHL-final-project/client/src/components/Waveform.js",["30"],"import React, { useEffect, useRef, useState } from \"react\";\n\nimport WaveSurfer from \"wavesurfer.js\";\nimport Emitter from \"../EventEmitter\"\n\n\n\nexport default function Waveform({ track, context }) {\n  const waveformRef = useRef(null);\n  const wavesurfer = useRef(null);\n  const [volume, setVolume] = useState(0.5);\n  const [muted, setMute] = useState(false);\n  const [soloed, setSolo] = useState(false);\n\n  const formWaveSurferOptions = (ref) => ({\n    container: ref,\n    waveColor: \"#eee\",\n    progressColor: \"OrangeRed\",\n    cursorColor: \"OrangeRed\",\n    barWidth: 3,\n    barRadius: 3,\n    responsive: true,\n    height: 150,\n    // If true, normalize by the maximum peak instead of 1.0.\n    normalize: true,\n    // Use the PeakCache to improve rendering speed of large waveforms.\n    partialRender: true,\n    audioContext: context\n  });\n\n  // create new WaveSurfer instance\n  // On component mount and when url changes\n  useEffect(() => {\n\n    const options = formWaveSurferOptions(waveformRef.current);\n    wavesurfer.current = WaveSurfer.create(options);\n\n    wavesurfer.current.load(track.url);\n\n    wavesurfer.current.on(\"ready\", function () {\n      // https://wavesurfer-js.org/docs/methods.html\n      // wavesurfer.current.play();\n      // setPlay(true);\n\n      // make sure object stillavailable when file loaded\n      if (wavesurfer.current) {\n        wavesurfer.current.setVolume(volume);\n        setVolume(volume);\n      }\n\n\n      Emitter.on('clickRewind', () => wavesurfer.current.seekTo(0));\n      Emitter.on('clickPlayPause', () => wavesurfer.current.playPause());\n\n    });\n\n\n    //one for all - when one wavefrom performs a seekTo emit event with currentTime as argument\n    wavesurfer.current.on(\"seek\", function (progress) {\n      //emit seekAll event\n      Emitter.emit('seekAll', wavesurfer.current.getCurrentTime())\n    });\n\n    //update other waveforms with progress from clicked\n    Emitter.on('seekAll', (progress) => {\n      if (progress !== wavesurfer.current.getCurrentTime()) {\n        wavesurfer.current.setCurrentTime(progress)\n      }\n    })\n\n    Emitter.on(\"soloON\", () => {\n      console.log(`somone turned a solo ON. fire off shouldIPlay`)\n    })\n\n    Emitter.on(\"soloOFF\", () => {\n      console.log(`somone turned a solo OFF. fire off shouldIPlay`)\n    })\n    // Removes events, elements and disconnects Web Audio nodes.\n    // when component unmount\n    return () => {\n      wavesurfer.current.unAll();\n      wavesurfer.current.destroy();\n    };\n  }, [track.url]);\n\n  const handleMute = () => {\n    setMute(!muted);\n    wavesurfer.current.toggleMute();\n  };\n\n  const handleSolo = () => {\n    setSolo((prev) => {\n      //if the waveform was previously unsoloed\n      if (!prev) {\n        Emitter.emit(\"soloON\")\n      } else {\n        Emitter.emit(\"soloOFF\")\n      }\n      return !soloed\n    });\n\n  };\n\n\n\n  const onVolumeChange = (e) => {\n    const { target } = e;\n    const newVolume = +target.value;\n\n    if (newVolume) {\n      setVolume(newVolume);\n      wavesurfer.current.setVolume(newVolume || 1);\n    }\n  };\n\n  return (\n    <div>\n      <div id=\"waveform\" ref={waveformRef} />\n      <div className=\"controls\">\n        <h2>{track.name}</h2>\n        <button\n          className={!muted ? \"mute\" : \"unmute\"}\n          onClick={handleMute}\n        > Mute\n        </button>\n        <button\n          className={!soloed ? \"solo\" : \"unsolo\"}\n          onClick={handleSolo}\n        > Solo\n        </button>\n        <input\n          type=\"range\"\n          id=\"volume\"\n          name=\"volume\"\n          // waveSurfer recognize value of `0` same as `1`\n          //  so we need to set some zero-ish value for silence\n          min=\"0.01\"\n          max=\"1\"\n          step=\".025\"\n          onChange={onVolumeChange}\n          defaultValue={volume}\n        />\n        <label htmlFor=\"volume\">Volume</label>\n      </div>\n    </div>\n  );\n}","/Users/romesh/lighthouse/LHL-final-project/client/src/EventEmitter.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":84,"column":6,"nodeType":"37","endLine":84,"endColumn":17,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'formWaveSurferOptions' and 'volume'. Either include them or remove the dependency array. You can also do a functional update 'setVolume(v => ...)' if you only need 'volume' in the 'setVolume' call.","ArrayExpression",["41"],"no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},"Update the dependencies array to be: [formWaveSurferOptions, track.url, volume]",{"range":"44","text":"45"},[2486,2497],"[formWaveSurferOptions, track.url, volume]"]